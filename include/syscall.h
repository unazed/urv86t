#pragma once

#include "emu.h"

#define RVSYSC_DEFN(name, ...) \
  iword_t name (rvstate_t state,##__VA_ARGS__)

RVSYSC_DEFN(rvsysc_read, iword_t fd, void* buff, word_t count);
RVSYSC_DEFN(rvsysc_write, iword_t fd, void* buff, word_t count);
RVSYSC_DEFN(rvsysc_exit, iword_t code);

extern const char* const repr_syscall_map[];
enum e_syscall
{
  /* https://jborza.com/post/2021-05-11-riscv-linux-syscalls */
  RV_SYSCALL__IO_SETUP,
  RV_SYSCALL__IO_DESTROY,
  RV_SYSCALL__IO_SUBMIT,
  RV_SYSCALL__IO_CANCEL,
  RV_SYSCALL__IO_GETEVENTS,
  RV_SYSCALL__SETXATTR,
  RV_SYSCALL__LSETXATTR,
  RV_SYSCALL__FSETXATTR,
  RV_SYSCALL__GETXATTR,
  RV_SYSCALL__LGETXATTR,
  RV_SYSCALL__FGETXATTR,
  RV_SYSCALL__LISTXATTR,
  RV_SYSCALL__LLISTXATTR,
  RV_SYSCALL__FLISTXATTR,
  RV_SYSCALL__REMOVEXATTR,
  RV_SYSCALL__LREMOVEXATTR,
  RV_SYSCALL__FREMOVEXATTR,
  RV_SYSCALL__GETCWD,
  RV_SYSCALL__LOOKUP_DCOOKIE,
  RV_SYSCALL__EVENTFD2,
  RV_SYSCALL__EPOLL_CREATE1,
  RV_SYSCALL__EPOLL_CTL,
  RV_SYSCALL__EPOLL_PWAIT,
  RV_SYSCALL__DUP,
  RV_SYSCALL__DUP3,
  RV_SYSCALL__FCNTL64,
  RV_SYSCALL__INOTIFY_INIT1,
  RV_SYSCALL__INOTIFY_ADD_WATCH,
  RV_SYSCALL__IOCTL,
  RV_SYSCALL__IOPRIO_SET,
  RV_SYSCALL__IOPRIO_GET,
  RV_SYSCALL__FLOCK,
  RV_SYSCALL__MKNODAT,
  RV_SYSCALL__MKDIRAT,
  RV_SYSCALL__UNLINKAT,
  RV_SYSCALL__SYMLINKAT,
  RV_SYSCALL__LINKAT,
  RV_SYSCALL__RENAMEAT,
  RV_SYSCALL__UMOUNT,
  RV_SYSCALL__MOUNT,
  RV_SYSCALL__PIVOT_ROOT,
  RV_SYSCALL__NI_SYSCALL,
  RV_SYSCALL__STATFS64,
  RV_SYSCALL__FSTATFS64,
  RV_SYSCALL__TRUNCATE64,
  RV_SYSCALL__FTRUNCATE64,
  RV_SYSCALL__FALLOCATE,
  RV_SYSCALL__FACCESSAT,
  RV_SYSCALL__CHDIR,
  RV_SYSCALL__FCHDIR,
  RV_SYSCALL__CHROOT,
  RV_SYSCALL__FCHMOD,
  RV_SYSCALL__FCHMODAT,
  RV_SYSCALL__FCHOWNAT,
  RV_SYSCALL__FCHOWN,
  RV_SYSCALL__OPENAT,
  RV_SYSCALL__CLOSE,
  RV_SYSCALL__VHANGUP,
  RV_SYSCALL__PIPE2,
  RV_SYSCALL__QUOTACTL,
  RV_SYSCALL__GETDENTS64,
  RV_SYSCALL__LSEEK,
  RV_SYSCALL__READ,
  RV_SYSCALL__WRITE,
  RV_SYSCALL__READV,
  RV_SYSCALL__WRITEV,
  RV_SYSCALL__PREAD64,
  RV_SYSCALL__PWRITE64,
  RV_SYSCALL__PREADV,
  RV_SYSCALL__PWRITEV,
  RV_SYSCALL__SENDFILE64,
  RV_SYSCALL__PSELECT6_TIME32,
  RV_SYSCALL__PPOLL_TIME32,
  RV_SYSCALL__SIGNALFD4,
  RV_SYSCALL__VMSPLICE,
  RV_SYSCALL__SPLICE,
  RV_SYSCALL__TEE,
  RV_SYSCALL__READLINKAT,
  RV_SYSCALL__NEWFSTATAT,
  RV_SYSCALL__NEWFSTAT,
  RV_SYSCALL__SYNC,
  RV_SYSCALL__FSYNC,
  RV_SYSCALL__FDATASYNC,
  RV_SYSCALL__SYNC_FILE_RANGE2,
  RV_SYSCALL__SYNC_FILE_RANGE,
  RV_SYSCALL__TIMERFD_CREATE,
  RV_SYSCALL__TIMERFD_SETTIME = 411,
  RV_SYSCALL__TIMERFD_GETTIME = 410,
  RV_SYSCALL__UTIMENSAT = 412,
  RV_SYSCALL__ACCT = 89,
  RV_SYSCALL__CAPGET,
  RV_SYSCALL__CAPSET,
  RV_SYSCALL__PERSONALITY,
  RV_SYSCALL__EXIT,
  RV_SYSCALL__EXIT_GROUP,
  RV_SYSCALL__WAITID,
  RV_SYSCALL__SET_TID_ADDRESS,
  RV_SYSCALL__UNSHARE,
  RV_SYSCALL__FUTEX = 422,
  RV_SYSCALL__SET_ROBUST_LIST = 99,
  RV_SYSCALL__GET_ROBUST_LIST,
  RV_SYSCALL__NANOSLEEP,
  RV_SYSCALL__GETITIMER,
  RV_SYSCALL__SETITIMER,
  RV_SYSCALL__KEXEC_LOAD,
  RV_SYSCALL__INIT_MODULE,
  RV_SYSCALL__DELETE_MODULE,
  RV_SYSCALL__TIMER_CREATE,
  RV_SYSCALL__TIMER_GETTIME = 408,
  RV_SYSCALL__TIMER_GETOVERRUN = 109,
  RV_SYSCALL__TIMER_SETTIME = 409,
  RV_SYSCALL__TIMER_DELETE = 111,
  RV_SYSCALL__CLOCK_SETTIME = 404,
  RV_SYSCALL__CLOCK_GETTIME = 403,
  RV_SYSCALL__CLOCK_GETRES = 406,
  RV_SYSCALL__CLOCK_NANOSLEEP = 407,
  RV_SYSCALL__SYSLOG = 116,
  RV_SYSCALL__PTRACE,
  RV_SYSCALL__SCHED_SETPARAM,
  RV_SYSCALL__SCHED_SETSCHEDULER,
  RV_SYSCALL__SCHED_GETSCHEDULER,
  RV_SYSCALL__SCHED_GETPARAM,
  RV_SYSCALL__SCHED_SETAFFINITY,
  RV_SYSCALL__SCHED_GETAFFINITY,
  RV_SYSCALL__SCHED_YIELD,
  RV_SYSCALL__SCHED_GET_PRIORITY_MAX,
  RV_SYSCALL__SCHED_GET_PRIORITY_MIN,
  RV_SYSCALL__SCHED_RR_GET_INTERVAL = 423,
  RV_SYSCALL__RESTART_SYSCALL = 128,
  RV_SYSCALL__KILL
};